/*  functions/src/index.ts  ——  versão “e-mail”  */
import * as functions from "firebase-functions/v1";
import * as admin     from "firebase-admin";
import nodemailer     from "nodemailer";

admin.initializeApp();
const db = admin.firestore();



/* ---------- SMTP transporter ---------- */
const mailUser = functions.config().mail.user;
const mailPass = functions.config().mail.pass;
const mailFrom = functions.config().mail.from;   // "Cripto Alerts" <xyz@gmail.com>

const transporter = nodemailer.createTransport({
  service: "gmail",            // troque se usar SendGrid, Mailgun, etc.
  auth: { user: mailUser, pass: mailPass },
});

/* util */
async function sendMail(to: string, subject: string, text: string) {
  await transporter.sendMail({ from: mailFrom, to, subject, text });
}

/* ========== callable opcional p/ testes ==========
*/
export const sendEmail = functions.region("us-central1")
  .https.onCall(async (data) => {
    const { to, subject, text } = data as { to:string; subject:string; text:string };
    if (!to || !subject || !text)
      throw new functions.https.HttpsError("invalid-argument", "Missing fields");
    await sendMail(to, subject, text);
    return { ok: true };
  });

/* ========== job que verifica alertas a cada 5 min ========== */
export const checkAlerts = functions.region("us-central1")
  .pubsub.schedule("every 5 minutes").onRun(async () => {
    try {
      const snap = await db.collectionGroup("alerts")
                            .where("triggered", "==", false)
                            .get();
      if (snap.empty) {
        console.log("checkAlerts: Nenhum alerta pendente encontrado.");
        return;
      }



      try {
        console.log("Tentando ler dados do Firestore...");
        const snapshot = await db.collection("alerts").get();
        console.log(`Encontrados ${snapshot.size} documentos.`);
      } catch (error) {
        console.error("Erro ao acessar Firestore:", error);
      }



      const ids = new Set<string>();
      const vs  = new Set<string>();
      snap.docs.forEach(d => {
        const a = d.data() as any;
        ids.add(a.coinId);
        vs.add(a.currency);
      });
      console.log(`checkAlerts: Encontrados alertas para moedas: ${[...ids].join(", ")}`);

      const url = `https://api.coingecko.com/api/v3/simple/price?ids=${[...ids].join(",")}&vs_currencies=${[...vs].join(",")}`;
      const prices = await fetch(url).then(r => r.json());
      const batch = db.batch();

      for (const doc of snap.docs) {
        const a = doc.data() as any;
        const current = prices[a.coinId]?.[a.currency];
        if (current == null) {
          console.warn(`Preço atual não encontrado para ${a.coinId} em ${a.currency}`);
          continue;
        }

        const hit =
          (a.direction === "above" && current >= a.targetPrice) ||
          (a.direction === "below" && current <= a.targetPrice);
        if (!hit) continue;

        try {
          const uid = doc.ref.path.split("/")[1];
          const user = await admin.auth().getUser(uid);
          const to = user.email;
          if (!to) {
            console.warn(`Usuário ${uid} não tem e-mail cadastrado.`);
            continue;
          }

          const subject = `⏰ ${a.coinId.toUpperCase()} hit your alert`;
          const text = [
            `Hi, I'm reaching out to let you know that ${a.coinId} is now ${a.direction} your target price of ${a.targetPrice} ${a.currency}. The current price is ${current} ${a.currency}.`,
            "",
            "",
            `Currency : ${a.coinId}`,
            `Direction: ${a.direction}`,
            `Target Price   : ${a.targetPrice} ${a.currency}`,
            `Current Price  : ${current} ${a.currency}`,
            "",
            "Automatically generated by CriptoTracker",
          ].join("\n");

          await sendMail(to, subject, text);
          console.log(`E-mail enviado para ${to} - Assunto: ${subject}`);

          batch.update(doc.ref, {
            triggered: true,
            triggeredAt: admin.firestore.FieldValue.serverTimestamp(),
          });
        } catch (error) {
          console.error(`Erro no processamento do alerta para doc ${doc.id}:`, error);
        }
      }

      await batch.commit();
      console.log("checkAlerts: Batch commit realizado com sucesso.");
    } catch (error) {
      console.error("Erro geral na função checkAlerts:", error);
    }
  });
